plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.sonarqube" version "4.4.1.3373"
	id 'jacoco'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacoco {
	toolVersion = '0.8.11'
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}

	def excludes = [
			'**/*Test*.*',
			'**/actions/*.*',
			'**/core/*.*',
			'**/markers/*.*',
			'**/services/**/*.*',
			'**/toolwindow/*.*',
			'**/utils/*.*'
	]

	def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
	classDirectories.from = files([javaClasses])

	sourceDirectories.from = files([
			"$project.projectDir/src/main/java",
	])

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // 이 rule을 적용할 것이다.
			element = 'CLASS' // class 단위로

			// 브랜치 커버리지 최소 50%
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.10
			}

			// 라인 커버리지 최소한 80%
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.10
			}

			// 빈 줄을 제외한 코드의 라인수 최대 300라인
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 300
			}

			// 커버리지 체크를 제외할 클래스들
			excludes = []
		}
	}
}

sonar {
	properties {
		property "sonar.projectKey", "rimrim990_CI-CD-test"
		property "sonar.organization", "rimrim990"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
	}
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}
